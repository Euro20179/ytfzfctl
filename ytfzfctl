#!/bin/sh

# Global Options {{{
: ${manual_instance_pick:=0}
: "${YTFZFCTL_PLAYLIST_DIR:=${XDG_CONFIG_DIR:-$HOME/.config}/ytfzf/playlists}"
#}}}

global_help () {
    printf "%s" \
"Usage: ytfzfctl [global options...] <action> [action options...] [action arguments...]
    global options:
	-m:             Pick a running ytfzf instance manually
    actions:
	update [branch]:         Updates ytfzf to branch, defaults to master (stable)
	video-info <info...>:    Gets information about the selected video in an instance.
				 See \"ytfzfctl video-info -h\" for more information.
	convert-subs:            converts each link in your subscriptions file to a valid link
	playlist <action>:       create, list, add to, and delete playlists.
				 See \"ytfzfctl playlist -h\" for more information.
	scrapers <action>:       List, and install scrapers.
				 See \"ytfzfctl scrapers -h\" for more information.
"
}

# utility functions {{{
print_info () {
    printf "$1" >&2
}

is_absolute_path (){ 
    [ -z "$1" ] && read -r path && set -- "$path"
    case "$path" in
	./*|../*|~/*|/*) return 0 ;;
	*) return 1 ;;
    esac
}

get_instances () {
	instances="$(pgrep -x ytfzf)"
	for instance in $instances; do
	    searches="${searches}
$(find $HOME/.cache/ytfzf/*-$instance -maxdepth 0 2>/dev/null | sed "s/\/home\/$USER\/.cache\/ytfzf\///")"
	done
	echo "$searches" | sed 1d | sed '/^[[:space:]]*$/d'
}

pick_instance () {
	i=0
	while read -r line; do
	    [ -z "$line" ] && continue
	    i=$((i+1))
	    printf "%d: %s\n" "$i" "$line" >&2
	done << EOF
$searches
EOF
	print_info "Pick the instance to get the link of the video\n"
	read -r instance
	echo "$instance"
}

die () {
    print_info "\033[31m$2\033[0m\n"
    exit $1
}
#}}}

# action functions {{{
convert_subscriptions () { #{{{
    while read -r line; do
	printf "#old link: %s\n" "$line"
	ytfzf --channel-link="$line"
	printf "\n"
    done << EOF
$(sed \
	-e "s/#.*//" \
	-e "/^[[:space:]]*$/d" \
	-e "s/[[:space:]]*//g" \
	"${YTFZF_SUBSCRIPTIONS_FILE:-$HOME/.config/ytfzf/subscriptions}" )
EOF
wait

} #}}}
convert_subscriptions_help () { #{{{
    print_info
"Usage: ytfzfctl convert-subscriptions\n"
} #}}}

update_ytfzf (){ #{{{
    _branch=$1
    _patches_to_apply=$2
    _fork_to_clone_from=${3:-pystardust/ytfzf}
    ytfzf_location="$(command -v ytfzf)"
    git clone "https://github.com/$_fork_to_clone_from" _tmp_ytfzf
    cd _tmp_ytfzf
    git checkout "$_branch"
    IFS=","
    for pat in $_patches_to_apply; do
	is_absolute_path "$pat" || pat="$HOME/.config/ytfzf/patches/$pat"
	patch < $pat
    done
    sudo make install man
    cd ..
    rm -rf _tmp_ytfzf
    printf "ytfzf updated\n"
} #}}}
update_ytfzf_help () { #{{{
    print_info \
"Usage: ytfzfctl update [options...] [branch]
    Recommended branches:
	master: stable branch
	development: unstable branch
	rewrite: the rewrite of ytfzf
    Options:
	-p <paths>                  A list of paths to patches seperated by commas to apply before installing.
	                            If the path is not absolute, it will look for the patch in ~/.config/ytfzf/patches
	-f <user/repo>              The fork to clone from instead of pystardust/ytfzf.
"
} #}}}
	
get_video_info () { #{{{
    attributes="$1"
    searches="$(get_instances)"
    [ $manual_instance_pick -eq 1 ] && instance="$(pick_instance)" || instance=1
    search="$(printf "%s" "$searches" | sed -n ${instance}p)"
    if [ $attributes = "all" ]; then
	while read -r url; do
	    jq -r '.[]|select(.url=="'$url'")' < "$HOME/.cache/ytfzf/$search/videos_json"
	done <<-EOF
	$(cat "$HOME/.cache/ytfzf/$search/ids")
	EOF
    else
	set -f
	IFS=,
	for attr in $attributes; do
	    while read -r url; do
		jq -r '.[]|select(.url=="'$url'").'"$attr"'' < "$HOME/.cache/ytfzf/$search/videos_json"
	    done <<-EOF
$(cat "$HOME/.cache/ytfzf/$search/ids")
EOF
	done
    fi
} #}}}
get_video_info_help () { #{{{
    print_info \
"Usage: ytfzfctl video-info <information...>
    information is what information you want, seperated by commas
    standard information:
	ID: video id
	url: link to video
	title: title of video
	thumbs: link to thumbnail image
	channel: author of video
	duration: length of video
	views: views on video
	date: upload date (relative to view time)
	description: video description
    a video is only required to have ID, url, and title, and some videos may have more non-standard information.
"
} #}}}

#playlist help{{{
playlist_help (){
    print_info \
"Usage: ytfzfctl playlist <action> [args...]
    actions:
	l:                                 list playlists
	c <playlist-name>:                 create a playlist
	d <playlist-name>:                 delete a playlist
	a <playlist-name> <ytfzf-args>:    add video(s) to a playlist
	p <playlist-name> <ytfzf-args>:    play a playlist in ytfzf
	r <playlist-name> <ytfzf-args>:    remove video(s) from a playlist
"
}
#}}}
#playlist{{{
playlist (){
    playlist_action="$1"
    case "$playlist_action" in
	list|l)
	    ls -1 "$YTFZFCTL_PLAYLIST_DIR" ;;
	create|c)
	    shift
	    name="$1"
	    [ -z "$name" ] && die 1 "no name given"
	    [ -d "$YTFZFCTL_PLAYLIST_DIR" ] && mkdir -p "$YTFZFCTL_PLAYLIST_DIR"
	    if [ -f "${YTFZFCTL_PLAYLIST_DIR}/${name}.ytfzfpl" ]; then
		printf "%s: " "$name already exists, would you like to erase it? [y/N]"
		read -r yn
		case "$yn" in
		    [yY]) echo '[]' > "${YTFZFCTL_PLAYLIST_DIR}/${name}.ytfzfpl";;
		    *) echo aborting; exit ;;
		esac
	    fi;;
	delete|d)
	    shift
	    name="$1"
	    [ -z "$name" ] && die 1 "no name given"
	    printf "%s: " "are you sure you would like to remove '$name'[Y/n]"
	    read -r yn
	    case "$yn" in
		[nN]) echo aborting; exit 1;;
		*) rm -f "${YTFZFCTL_PLAYLIST_DIR}/${name}.ytfzfpl" ;;
	    esac ;;
	add|a)
	    shift
	    name="$1"
	    pl="${YTFZFCTL_PLAYLIST_DIR}/${name}.ytfzfpl"
	    shift
	    search="$@"
	    [ -z "$name" ] && die 1 "no name given"
	    data="$(ytfzf --loop=0 -IVJ --interface='' "$@" | tr -d '\n' | sed 's/}{[[:space:]]*"/},{"/g')"
	    [ -z "$data" ] && die 1 "nothing selected"
	    new_data="$(cat "$pl" | jq '. += ['"$data"']')"
	    echo "$new_data" > "$pl" ;;
	play|p)
	    shift 
	    name="$1"
	    shift
	    ytfzf -cp "$@" "${YTFZFCTL_PLAYLIST_DIR}/${name}.ytfzfpl" ;;
	remove|r)
	    shift
	    name="$1"
	    shift
	    pl="${YTFZFCTL_PLAYLIST_DIR}/${name}.ytfzfpl"
	    links="$(ytfzf -L "$@" -cp "$pl")"
	    set -f
	    for link in $links; do
		new_data="$(jq '[ .[]|select(.url!="'"$link"'") ]' < "$pl" )"
		echo "$new_data" > "$pl"
		echo "removed: $link"
	    done
    esac
}
#}}}

#scrapers help{{{
scrapers_help(){
    print_info \
"Usage ytfzfctl scrapers <command> [args...]
    commands:
	list | l:             list installed scrapers
	install | i <link>:   install a scraper from a git link
"
}
#}}}
#scrapers{{{
scrapers () {
    path="${YTFZF_CUSTOM_SCRAPERS_DIR:-${YTFZF_CONFIG_DIR:-${XDG_CONFIG_HOME:-$HOME/.config}/ytfzf}/scrapers}"
    case "$1" in
	list|l)
	    ls -1 "$path" | sed '/.*\.conf$/d' ;;
	install|i)
	    shift
	    url="$1"
	    git clone "$url" "_tmp_scraper"
	    cd "_tmp_scraper"
	    ls
	    cp *.conf "$path" 
	    name=$(echo *.ytfzfscraper | sed 's/\.ytfzfscraper$//')
	    cp *.ytfzfscraper "$path/$name"
	    cd ..
	    rm -rf "_tmp_scraper";;
    esac
}
#}}}
#}}}


# get global options{{{
while getopts 'hm' OPT; do
    case "$OPT" in
	h) global_help; exit ;;
	m) manual_instance_pick=1 ;;
    esac
done
shift $((OPTIND-1))
#}}}

action="$1"
[ -n "$action" ] && shift 1 || die 1 "no action given\ntry: ytfzfctl -h"

case "$action" in
    update) 
	while getopts "hp:f:" OPT; do
	    case "$OPT" in
		h) update_ytfzf_help && exit ;;
		p) patches_to_apply="$OPTARG" ;;
		f) fork_to_clone_from="$OPTARG" ;;
	    esac
	done
	shift $((OPTIND-1))
	branch="${1:-master}"
	update_ytfzf "$branch" "$patches_to_apply" "$fork_to_clone_from" ;;
    video-info)
	while getopts "h" OPT; do
	    [ "$OPT" = "h" ] && get_video_info_help && exit
	done
	get_video_info "$1";;
    convert-subscriptions|convert-subs)
	while getopts "h" OPT; do
	    [ "$OPT" = "h" ] && convert_subscriptions_help && exit
	done
	convert_subscriptions ;;
    playlist)
	while getopts "h" OPT; do
	    [ "$OPT" = "h" ] && playlist_help && exit
	done
	playlist "$@";;
    scrapers)
	while getopts "h" OPT; do
	    [ "$OPT" = "h" ] && scrapers_help && exit
	done
	scrapers "$@" ;;
esac
