#!/bin/sh

# Global Options {{{
: ${manual_instance_pick:=0}
#}}}

global_help () {
    printf "%s" \
"Usage: ytfzf-tools [global options...] <action> [action options...] [action arguments...]
    global options:
	-m:             Pick a running ytfzf instance manually
    actions:
	update [branch]:         Updates ytfzf to branch, defaults to master (stable)
	video-info <info...>:    Gets information about the selected video in an instance.
				 See \"ytfzf-tools video-info -h\" for more information.
	convert-subs:            converts each link in your subscriptions file to a valid link
"
}

# utility functions {{{
print_info () {
    printf "$1" >&2
}

get_instances () {
	instances="$(pgrep -x ytfzf)"
	for instance in $instances; do
	    searches="${searches}
$(find $HOME/.cache/ytfzf/*-$instance -maxdepth 0 2>/dev/null | sed "s/\/home\/$USER\/.cache\/ytfzf\///")"
	done
	echo "$searches" | sed 1d
}

pick_instance () {
	i=0
	while read -r line; do
	    [ -z "$line" ] && continue
	    i=$((i+1))
	    printf "%d: %s\n" "$i" "$line" >&2
	done << EOF
$searches
EOF
	print_info "Pick the instance to get the link of the video\n"
	read -r instance
	echo "$instance"
}

die () {
    print_info "\033[31m$2\033[0m\n"
    exit $1
}
#}}}

# action functions {{{
convert_subscriptions () { #{{{
    while read -r line; do
	printf "#old link: %s\n" "$line"
	ytfzf --channel-link="$line"
	printf "\n"
    done << EOF
$(sed \
	-e "s/#.*//" \
	-e "/^[[:space:]]*$/d" \
	-e "s/[[:space:]]*//g" \
	"${YTFZF_SUBSCRIPTIONS_FILE:-$HOME/.config/ytfzf/subscriptions}" )
EOF
wait

} #}}}

convert_subscriptions_help () { #{{{
    print_info
"Usage: ytfzf-tools convert-subscriptions\n"
} #}}}

update_ytfzf (){ #{{{
    _branch=$1
    ytfzf_location="$(command -v ytfzf)"
    git clone "https://github.com/pystardust/ytfzf" _tmp_ytfzf
    cd _tmp_ytfzf
    git checkout "$_branch"
    sudo make install
    cd ..
    rm -rf _tmp_ytfzf
    printf "ytfzf updated\n"
} #}}}
update_ytfzf_help () { #{{{
    print_info \
"Usage: ytfzf-tools update [branch]
    Recommended branches:
	master: stable branch
	development: unstable branch
	rewrite: the rewrite of ytfzf
"
} #}}}
	
get_video_info () { #{{{
    attributes="$1"
    searches="$(get_instances)"
    [ $manual_instance_pick -eq 1 ] && instance="$(pick_instance)" || instance=1
    search="$(printf "%s" "$searches" | sed -n ${instance}p)"
    if [ $attributes = "all" ]; then
	jq -r '.[]|select(.ID=="'$(cat "$HOME/.cache/ytfzf/$search/ids")'")' < "$HOME/.cache/ytfzf/$search/videos_json"
    else
	set -f
	IFS=,
	for attr in $attributes; do
	    jq -r '.[]|select(.ID=="'$(cat "$HOME/.cache/ytfzf/$search/ids")'").'"$attr"'' < "$HOME/.cache/ytfzf/$search/videos_json"
	done
    fi
} #}}}
get_video_info_help () { #{{{
    print_info \
"Usage: ytfzf-tools video-info <information...>
    information is what information you want, seperated by commas
    standard information:
	ID: video id
	url: link to video
	title: title of video
	thumbs: link to thumbnail image
	channel: author of video
	duration: length of video
	views: views on video
	date: upload date (relative to view time)
	description: video description
    a video is only required to have ID, url, and title, and some videos may have more non-standard information.
"
} #}}}

#}}}


# get global options{{{
while getopts 'hm' OPT; do
    case "$OPT" in
	h) global_help; exit ;;
	m) manual_instance_pick=1 ;;
    esac
done
shift $((OPTIND-1))
#}}}

action="$1"
[ -n "$action" ] && shift 1 || die 1 "no action given\ntry: ytfzfctl -h"

case "$action" in
    update) 
	while getopts "h" OPT; do
	    [ "$OPT" = "h" ] && update_ytfzf_help && exit
	done
	branch="${1:-master}"
	update_ytfzf "$branch" ;;
    video-info)
	while getopts "h" OPT; do
	    [ "$OPT" = "h" ] && get_video_info_help && exit
	done
	get_video_info "$1";;
    convert-subscriptions|convert-subs)
	while getopts "h" OPT; do
	    [ "$OPT" = "h" ] && convert_subscriptions_help && exit
	done
	convert_subscriptions ;;
esac
